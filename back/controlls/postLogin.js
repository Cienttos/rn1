import conexion from "../bd.js";  // Importa la conexi칩n a la base de datos
import bcrypt from "bcrypt";      // Importa bcrypt para hashear y comparar contrase침as

export default async function postLogin(req, res) {
    try {
        // 游댳 Obtener email y password del cuerpo de la petici칩n
        const { email, password } = req.body;

        // 游댳 Validar que se env칤en los campos obligatorios
        if (!email || !password)
            return res.status(400).json({ mensaje: "Faltan datos obligatorios." });

        // 游댳 Buscar al usuario en la base de datos por su email
        const [usuarios] = await conexion.query(
            "SELECT * FROM usuarios WHERE email = ?",
            [email.trim().toLowerCase()]
        );

        // 游댳 Si no se encuentra el usuario, devolver error
        if (usuarios.length === 0)
            return res.status(401).json({ mensaje: "Usuario o contrase침a incorrectos." });

        const usuario = usuarios[0]; // Tomar el primer (y 칰nico) usuario encontrado

        // 游댳 Comparar la contrase침a ingresada con la almacenada (hasheada)
        const esValida = await bcrypt.compare(password, usuario.password);
        if (!esValida)
            return res.status(401).json({ mensaje: "Usuario o contrase침a incorrectos." });

        // 游댳 Hashear el ID del usuario para guardarlo en la cookie
        const hashedId = await bcrypt.hash(usuario.id.toString(), 10);

        // 游댳 Hashear tambi칠n el nombre de la cookie ("id")
        const hashedCookieName = await bcrypt.hash("id", 10);

        // 游댳 Configuraci칩n de seguridad de la cookie seg칰n el entorno
        const inProduction = process.env.NODE_ENV === 'production';
        res.cookie(hashedCookieName, hashedId, {
            httpOnly: true,            // La cookie no es accesible desde JavaScript
            secure: inProduction,       // Solo en HTTPS si est치 en producci칩n
            sameSite: inProduction ? 'strict' : 'lax', // Pol칤tica de SameSite
            maxAge: 24 * 60 * 60 * 1000 // 1 d칤a de duraci칩n
        });

        // 游댳 Devolver mensaje de 칠xito
        return res.status(200).json({ mensaje: "Inicio de sesi칩n exitoso." });

    } catch (error) {
        // 游댳 Captura cualquier error inesperado y devuelve 500
        console.error("Error en postLogin:", error);
        return res.status(500).json({ mensaje: "Error interno del servidor." });
    }
}
